name: Master Terraform Monitor

on:
  schedule:
    - cron: '0 5 * * *'  # כל יום בשעה 05:00 UTC
  workflow_dispatch:

jobs:
  run-and-monitor:
    runs-on: ubuntu-latest

    steps:
      - name: Install tools
        run: |
          sudo apt-get update
          sudo apt-get install curl jq -y

      - name: Token Test
        run: |
          curl -H "Authorization: Bearer ghs_3RWaL0MUdF3Wax2NxmWfYZMWM6Gwjy1iGgRN" https://api.github.com/user

      - name: Trigger TerraformPlan-FAILSimulation.yml
        id: trigger
        run: |
          echo "📤 מפעיל TerraformPlan-FAILSimulation.yml ושומר זמן התחלה..."
          start_time=$(date -u +"%Y-%m-%dT%H:%M:%SZ")
          echo "start_time=$start_time" >> $GITHUB_OUTPUT

          curl -s -X POST \
            -H "Accept: application/vnd.github+json" \
            -H "Authorization: token ${{ secrets.GH_PAT_TOKEN }}" \
            https://api.github.com/repos/tomer-dex/Pipeline-Failed-Alert/actions/workflows/TerraformPlan-FAILSimulation.yml/dispatches \
            -d '{"ref":"main"}'

          echo "⏳ ממתין 10 שניות שהריצה תתחיל..."
          sleep 10

      - name: Find latest run after dispatch
        id: find-run
        run: |
          echo "🔍 מחפש run שנוצר אחרי: ${{ steps.trigger.outputs.start_time }}"
          run_id=""

          for i in {1..10}; do
            echo "⌛ ניסיון $i..."
            runs=$(curl -s -H "Authorization: token ${{ secrets.GH_PAT_TOKEN }}" \
              "https://api.github.com/repos/tomer-dex/Pipeline-Failed-Alert/actions/workflows/TerraformPlan-FAILSimulation.yml/runs?branch=main")

            run_id=$(echo "$runs" | jq -r --arg start "${{ steps.trigger.outputs.start_time }}" '
              .workflow_runs[] | select(.created_at > $start) | .id' | head -n 1)

            if [ -n "$run_id" ]; then
              echo "✅ נמצא run_id: $run_id"
              echo "run_id=$run_id" >> $GITHUB_OUTPUT
              break
            fi

            echo "⏳ לא נמצא עדיין... מחכה 5 שניות"
            sleep 5
          done

          if [ -z "$run_id" ]; then
            echo "❌ לא הצלחתי למצוא run שנוצר אחרי ההפעלה"
            exit 1
          fi

      - name: Poll run status
        id: poll
        run: |
          run_id=${{ steps.find-run.outputs.run_id }}
          echo "🔁 עוקב אחרי סטטוס של run_id=$run_id"

          for i in {1..10}; do
            echo "⌛ בדיקה #$i..."

            result=$(curl -s -H "Authorization: token ${{ secrets.GH_PAT_TOKEN }}" \
              https://api.github.com/repos/tomer-dex/Pipeline-Failed-Alert/actions/runs/$run_id)

            status=$(echo "$result" | jq -r '.status')
            conclusion=$(echo "$result" | jq -r '.conclusion')

            echo "📘 Status: $status | Conclusion: $conclusion"

            if [ "$status" == "completed" ]; then
              echo "status=$status" >> $GITHUB_OUTPUT
              echo "conclusion=$conclusion" >> $GITHUB_OUTPUT
              break
            fi

            sleep 15
          done

      - name: Print failure message if run failed
        if: ${{ steps.poll.outputs.conclusion != 'success' }}
        run: |
          echo "❌ הפייפליין 'TerraformPlan-FAILSimulation.yml' נכשל!"
          echo "Conclusion: ${{ steps.poll.outputs.conclusion }}"
          exit 1

      - name: Print success message
        if: ${{ steps.poll.outputs.conclusion == 'success' }}
        run: echo "✅ הפייפליין TerraformPlan-FAILSimulation.yml הצליח"

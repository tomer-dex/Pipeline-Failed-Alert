name: Master Terraform Monitor

on:
  workflow_dispatch:

permissions:
  actions: write
  contents: read

jobs:
  run-and-monitor:
    runs-on: ubuntu-latest

    steps:
      - name: 🧾 Checkout repository
        uses: actions/checkout@v4
        
      - name: Install tools
        run: |
          sudo apt-get update
          sudo apt-get install curl jq gh unzip -y
          
      - name: ⚙️ Configure GitHub CLI
        run: |
          echo "${{ secrets.GITHUB_TOKEN }}" | gh auth login --with-token
          gh auth status
          
      - name: 📤 Trigger deploy.yml
        id: trigger
        run: |
          gh workflow run deploy.yml --ref main
          echo "start_time=$(date -u +'%Y-%m-%dT%H:%M:%SZ')" >> $GITHUB_ENV #create start time var to know what is the specific time that the deploy.yml is ru
          sleep 10

      - name: 🔍 Find latest workflow run
        id: find-run
        run: |
          echo "🔎 Searching for latest deploy.yml run..."
          run_id=$(gh run list \
            --workflow deploy.yml \
            --branch main \
            --json databaseId,createdAt \
            --jq ".[] | select(.createdAt > \"${start_time}\") | .databaseId" | head -n 1)

          if [ -z "$run_id" ]; then
            echo "❌ No matching run found"
            exit 1
          fi

          echo "✅ Found run ID: $run_id"
          echo "run_id=$run_id" >> $GITHUB_OUTPUT

      - name: ⏱ Wait for deploy.yml run to complete
        id: poll
        run: |
          run_id=${{ steps.find-run.outputs.run_id }}
          echo "🔁 Waiting for deploy.yml run (ID: $run_id)..."
    
          # מחכה שהריצה תסתיים ומדפיסה את הלוגים בזמן אמת
          gh run watch $run_id --exit-status

          # אם הגענו לפה, זה אומר שהריצה הסתיימה בהצלחה
          echo "✅ Deploy workflow completed successfully!"

      - name: 🔍 Extract Terraform plan from deploy.yml logs
        id: extract-plan
        run: |
          run_id=${{ steps.find-run.outputs.run_id }}
          echo "📖 Fetching logs for run ID: $run_id..."

          # שליפת כל הלוגים בפורמט טקסט
          LOG_CONTENT=$(gh run view $run_id --log)

          # שמירת הלוג המלא כ-reference
          echo "$LOG_CONTENT" > full_log.txt

          echo "🔍 Searching for Terraform plan output..."
          PLAN_OUTPUT=$(echo "$LOG_CONTENT" | awk '/Terraform will perform the following actions:/,/Plan: [0-9]+ to add/')

          if [ -z "$PLAN_OUTPUT" ]; then
            echo "✅ No Terraform drift detected"
            echo "drift_detected=false" >> $GITHUB_OUTPUT
          else
            echo "⚠️ Drift detected"
            echo "$PLAN_OUTPUT" > drift_details.txt
            echo "drift_detected=true" >> $GITHUB_OUTPUT
          fi
        shell: bash

        
      - name: 📩 Open ticket in Freshservice
        if: ${{ steps.extract-plan.outputs.drift_detected == 'true' }}
        shell: bash
        run: |
          echo "📨 Opening ticket in Freshservice..."
      
          # חילוץ וניקוי של תוכן ה-terraform plan
          awk '/Terraform will perform the following actions:/,/Note: You/' drift_details.txt > raw_plan.txt
          awk '{ if ($1 == "terraform-plan") {$1=$2=$3=""; sub(/^   */, ""); print} else {print} }' raw_plan.txt > clean_plan.txt
          sed -i -E 's/[0-9]{4}-[0-9]{2}-[0-9]{2}T[0-9]{2}:[0-9]{2}:[0-9]{2}\.[0-9]+Z[[:space:]]*//g' clean_plan.txt
          sed -i -r "s/\x1B\[[0-9;]*[A-Za-z]//g" clean_plan.txt
      
          CLEAN_BODY=$(cat clean_plan.txt)
      
          # יצירת גוף JSON בפורמט כמו ב-Elastic
          cat <<EOF > payload.json
          {
            "short_description": "🚨 Terraform Drift Detected",
            "description": "${CLEAN_BODY}",
            "severity": "warning",
            "Metric_Name": "Terraform Drift",
            "Metric_Value": "Detected Changes",
            "Resource": "Infrastructure - Terraform"
          }
          EOF
      
          echo "📄 Payload:"
          cat payload.json
      
          # שליחה ל-Freshservice API (או ל-Webhook שלך)
          curl -s -X POST "https://directex.freshservice.com/api/v2/tickets" \
            -H "Content-Type: application/json" \
            -H "Authorization: Basic ${{ secrets.FRESHDESK_API_KEY }}" \
            -d @payload.json

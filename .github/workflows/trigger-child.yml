name: Master Terraform Monitor

on:
  workflow_dispatch:

permissions:
  actions: write
  contents: read

jobs:
  run-and-monitor:
    runs-on: ubuntu-latest

    steps:
      - name: Install tools
        run: |
          sudo apt-get update
          sudo apt-get install curl jq unzip -y

      - name: 📤 Trigger deploy.yml
        id: trigger
        run: |
          echo "start_time=$(date -u +'%Y-%m-%dT%H:%M:%SZ')" >> $GITHUB_ENV

          curl -s -X POST \
            -H "Accept: application/vnd.github+json" \
            -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" \
            https://api.github.com/repos/${{ github.repository }}/actions/workflows/deploy.yml/dispatches \
            -d '{"ref":"main"}'

          echo "⏳ Waiting for run to begin..."
          sleep 10

      - name: 🔍 Find latest workflow run
        id: find-run
        run: |
          for i in {1..5}; do
            runs=$(curl -s -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" \
              "https://api.github.com/repos/${{ github.repository }}/actions/workflows/deploy.yml/runs?branch=main")

            run_id=$(echo "$runs" | jq -r --arg start "$start_time" '
              .workflow_runs[] | select(.created_at > $start) | .id' | head -n 1)

            if [ -n "$run_id" ]; then
              echo "run_id=$run_id" >> $GITHUB_OUTPUT
              break
            fi

            echo "⌛ Waiting for run to be available..."
            sleep 5
          done

          if [ -z "$run_id" ]; then
            echo "❌ Failed to locate a matching run"
            exit 1
          fi

      - name: ⏱ Poll run status
        id: poll
        run: |
          run_id=${{ steps.find-run.outputs.run_id }}

          for i in {1..10}; do
            result=$(curl -s -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" \
              https://api.github.com/repos/${{ github.repository }}/actions/runs/$run_id)

            status=$(echo "$result" | jq -r '.status')
            conclusion=$(echo "$result" | jq -r '.conclusion')

            echo "Status: $status | Conclusion: $conclusion"

            if [ "$status" = "completed" ]; then
              echo "conclusion=$conclusion" >> $GITHUB_OUTPUT
              break
            fi

            sleep 10
          done

      - name: 📥 Download logs
        if: ${{ steps.poll.outputs.conclusion != '' }}
        run: |
          run_id=${{ steps.find-run.outputs.run_id }}
          curl -s -L -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" \
            -o logs.zip \
            https://api.github.com/repos/${{ github.repository }}/actions/runs/$run_id/logs
          unzip -o logs.zip -d logs
          find logs

      - name: 🔍 Check Terraform plan for drift
        id: diff-check
        run: |
          PLAN_FILE=$(find logs -type f -iname "*plan*.txt" | head -n 1)
          echo "Found plan file: $PLAN_FILE"

          if [ -z "$PLAN_FILE" ]; then
            echo "✅ No plan file found – assuming no drift"
            echo "drift_detected=false" >> $GITHUB_OUTPUT
            exit 0
          fi

          echo "📄 Plan output:"
          cat "$PLAN_FILE"

          if grep -q 'No changes. Infrastructure is up-to-date.' "$PLAN_FILE"; then
            echo "✅ No drift detected"
            echo "drift_detected=false" >> $GITHUB_OUTPUT
          else
            echo "⚠️ Drift detected"
            echo "drift_detected=true" >> $GITHUB_OUTPUT
            awk '/Terraform will perform the following actions:/,0' "$PLAN_FILE" > drift_details.txt
          fi
        shell: bash
        
      - name: 📩 Open ticket in Freshservice
        if: ${{ steps.diff-check.outputs.drift_detected == 'true' }}
        shell: bash
        run: |
          echo "📨 Opening ticket in Freshservice..."
      
          echo "📄 Reading and formatting plan file..."
          DRIFT_BODY=$(jq -Rs . < drift_details.txt)
      
          cat <<EOF > payload.json
          {
            "subject": "🚨 Terraform Drift Detected",
            "description": "<pre>${DRIFT_BODY:1:${#DRIFT_BODY}-2}</pre>",
            "email": "tomer@direct-ex.co.il",
            "priority": 1,
            "status": 2
          }
          EOF
      
          RESPONSE=$(curl -s -w "\nHTTP_CODE:%{http_code}" -o response.json \
            -X POST "https://directex.freshservice.com/api/v2/tickets" \
            -H "Content-Type: application/json" \
            -H "Authorization: Basic ${{ secrets.FRESHDESK_API_KEY }}" \
            -d @payload.json)
      
          echo "$RESPONSE"
          echo "📄 API Response:"
          cat response.json
      
            
                      echo "$RESPONSE"
                      echo "📄 API Response:"
                      cat response.json
